const { Sequelize } = require('sequelize');
const axios = require('axios');
const Items = require('../../models/Item/Items');
const ChannelNotificationService = require('../notification/channelNotificationService');

const BOT_TOKEN = process.env.DISCORD_TOKEN;

class ItemService {

    // Get a Single Item by ID or Name
    static async getItem(identifier) {
        try {
            return await Items.findOne({
                where: {
                    [Sequelize.Op.or]: [{id: identifier}, {name: identifier}],
                },
            });
        } catch (error) {
            console.error("‚ùå Error al obtener el √≠tem:", error.message);
            return null;
        }
    }

    // Get All Items
    static async getAllItems() {
        try {
            return await Items.findAll();
        } catch (error) {
            console.error("‚ùå Error al obtener los √≠tems:", error.message);
            return null;
        }
    }

    // ‚úÖ Create an Item
    static async createItem(itemData) {
        try {
            const item = await Items.create(itemData);

            // Notification Example (Optional)
            await ChannelNotificationService.sendChannelNotification(
                `üéâ Nuevo √≠tem creado: **${item.name}**`,
                `Detalles del √≠tem:\n- Precio: ${item.price}\n- Categor√≠a: ${item.category}`
            );

            return item;
        } catch (error) {
            console.error("‚ùå Error al crear el √≠tem:", error.message);
            return null;
        }
    }

    // ‚úÖ Update an Item
    static async updateItem(id, updateData) {
        try {
            const item = await this.getItem(id);
            if (!item) {
                console.error(`‚ùå No se encontr√≥ el √≠tem con ID: ${id}`);
                return null;
            }

            await item.update(updateData);

            // Notification Example (Optional)
            await ChannelNotificationService.sendChannelNotification(
                `üìù √çtem actualizado: **${item.name}**`,
                `Se actualiz√≥ con √©xito el √≠tem: ${item.name}`
            );

            return item;
        } catch (error) {
            console.error("‚ùå Error al actualizar el √≠tem:", error.message);
            return null;
        }
    }

    // ‚úÖ Delete an Item
    static async deleteItem(identifier) {
        try {
            const item = await this.getItem(identifier);
            if (!item) {
                console.error(`‚ùå No se encontr√≥ el √≠tem con identificador: ${identifier}`);
                return null;
            }

            await item.destroy();

            // Notification Example (Optional)
            await ChannelNotificationService.sendChannelNotification(
                `‚ùå √çtem eliminado: **${item.name}**`,
                `El √≠tem con nombre ${item.name} fue eliminado correctamente.`
            );

            console.log(`‚úÖ √çtem eliminado: ${identifier}`);
            return true;
        } catch (error) {
            console.error("‚ùå Error al eliminar el √≠tem:", error.message);
            return false;
        }
    }

    // ‚úÖ Assign Role to User (Example Function, if relevant)
    static async assignRoleToUser(req) {
        const { guildId, userId, roleId } = req;

        try {
            const response = await axios.put(
                `https://discord.com/api/guilds/${guildId}/members/${userId}/roles/${roleId}`,
                {},
                {
                    headers: {
                        Authorization: `Bot ${BOT_TOKEN}`,
                        "Content-Type": "application/json",
                    },
                }
            );
            return { success: true, message: "Rol asignado exitosamente.", data: response.data };
        } catch (error) {
            console.error("‚ùå Error al asignar el rol:", error.response?.data || error.message);
            throw new Error(error.response?.data || error.message);
        }
    }
}

module.exports = ItemService;
